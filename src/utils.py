import os
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import joblib
from sklearn.metrics import confusion_matrix, roc_curve, auc
import warnings
warnings.filterwarnings("ignore", category=UserWarning)

import joblib
joblib.parallel.parallel_backend('threading')



def save_model(model, path="../models/heart_disease_best_model.pkl"):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    joblib.dump(model, path)

def save_report(report, conf_matrix, path="../outputs/reports/classification_report.txt"):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w") as f:
        f.write(report)
        f.write("\\nConfusion Matrix:\\n")
        f.write(np.array2string(conf_matrix))

def save_summary(model_name, accuracy, best_params, path="../outputs/reports/summary.txt"):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w") as f:
        f.write(f"Best Model: {model_name}\\n")
        f.write(f"Test Accuracy: {accuracy:.4f}\\n")
        f.write(f"Best Parameters: {best_params}\\n")

def plot_roc_curve(y_test, y_prob, path="../outputs/figures/roc_curve.png"):
    fpr, tpr, _ = roc_curve(y_test, y_prob)
    roc_auc = auc(fpr, tpr)
    plt.figure(figsize=(8, 6))
    plt.plot(fpr, tpr, label=f"ROC curve (AUC = {roc_auc:.2f})", lw=2)
    plt.plot([0, 1], [0, 1], linestyle="--", color="gray")
    plt.xlabel("False Positive Rate")
    plt.ylabel("True Positive Rate")
    plt.title("ROC Curve")
    plt.legend()
    os.makedirs(os.path.dirname(path), exist_ok=True)
    plt.savefig(path)
    plt.close()
    
# src/utils.py

def plot_eda(df):
    import os
    import matplotlib
    matplotlib.use('Agg')

    import matplotlib.pyplot as plt
    import seaborn as sns    

    output_dir = os.path.join(os.path.dirname(__file__), "..", "outputs", "figures")
    output_dir = os.path.abspath(output_dir)
    os.makedirs(output_dir, exist_ok=True)
    # 1. ”®–≤—á—Ç—ç–π —ç—Å—ç—Ö —Ö—É–≤—å
    plt.figure(figsize=(6, 4))
    sns.countplot(x='target', data=df)
    plt.title('Heart Disease Presence (0 = Healthy, 1 = Diseased)')
    plt.savefig(f'{output_dir}/disease_count.png')
    plt.close()

    # 2. ”®–≤—á–ª”©–ª–∏–π–Ω –±–∞–π–¥–∞–ª –Ω–∞—Å–Ω—ã –±“Ø–ª–≥—ç—ç—Ä
    plt.figure(figsize=(10, 6))
    sns.histplot(data=df, x='age', hue='target', bins=20, kde=True)
    plt.title('Age Distribution by Heart Disease')
    plt.savefig(f'{output_dir}/age_distribution.png')
    plt.close()

    # 3. ”®–≤—á–ª”©–ª–∏–π–Ω –±–∞–π–¥–∞–ª —Ö“Ø–π—Å—ç—ç—Ä
    plt.figure(figsize=(6, 4))
    sns.countplot(x='sex', hue='target', data=df)
    plt.title('Heart Disease by Gender (1 = Male, 0 = Female)')
    plt.savefig(f'{output_dir}/disease_by_gender.png')
    plt.close()

    # 4. Chest pain type-—Ä ”©–≤—á–ª”©–ª
    plt.figure(figsize=(8, 5))
    sns.countplot(x='cp', hue='target', data=df)
    plt.title('Heart Disease by Chest Pain Type')
    plt.savefig(f'{output_dir}/disease_by_cp.png')
    plt.close()

    # 5. Thal (Thalassemia) vs Disease
    plt.figure(figsize=(8, 5))
    sns.countplot(x='thal', hue='target', data=df)
    plt.title('Heart Disease by Thalassemia Type')
    plt.savefig(f'{output_dir}/disease_by_thal.png')
    plt.close()

    # 6. ST depression (oldpeak)
    plt.figure(figsize=(8, 5))
    sns.histplot(data=df, x='oldpeak', hue='target', bins=30, kde=True)
    plt.title('Oldpeak (ST Depression) by Heart Disease')
    plt.savefig(f'{output_dir}/oldpeak_distribution.png')
    plt.close()

    # 7. Max heart rate (thalach)
    plt.figure(figsize=(8, 5))
    sns.histplot(data=df, x='thalch', hue='target', bins=30, kde=True)
    plt.title('Max Heart Rate (Thalach) by Disease')
    plt.savefig(f'{output_dir}/thalach_distribution.png')
    plt.close()

    # 8. Correlation matrix
    numerical_cols = ['age', 'trestbps', 'chol', 'thalch', 'oldpeak', 'ca', 'target']
    corr_matrix = df[numerical_cols].corr()

    plt.figure(figsize=(10, 8))
    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
    plt.title('Correlation Matrix of Numeric Features')
    plt.savefig(f'{output_dir}/correlation_matrix.png')
    plt.close()

    print("üìä –ë“Ø—Ö EDA –∑—É—Ä–∞–≥ —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞.")


# src/utils.py –¥–æ—Ç–æ—Ä –±–∏—á–∏–∂ –±–æ–ª–Ω–æ

from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
import numpy as np
import os

def generate_analysis_report(df, model, X_test, y_test):
    # "summary.txt" —Ç–∞–π–ª–∞–Ω–≥–∏–π–Ω –∑–∞–º—ã–≥ –∑–∞–∞—Ö
    output_path = os.path.join(os.path.dirname(__file__), "..", "outputs", "reports", "summary.txt")
    output_path = os.path.abspath(output_path)
    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    with open(output_path, "w", encoding="utf-8") as f:
        f.write("# üß† –ó“Ø—Ä—Ö–Ω–∏–π ”©–≤—á–ª”©–ª–∏–π–Ω –∞–Ω–∞–ª–∏–∑—ã–Ω —Ç–∞–π–ª–∞–Ω\n\n")

        # 1. Feature importance
        if hasattr(model["classifier"], "feature_importances_"):
            f.write("## üìå Feature Importance (Tree-based)\n")
            try:
                features = model["preprocessor"].get_feature_names_out()
            except:
                features = [f"feature_{i}" for i in range(len(model["classifier"].feature_importances_))]
            importance = model["classifier"].feature_importances_
            top = sorted(zip(features, importance), key=lambda x: x[1], reverse=True)[:5]
            for name, score in top:
                f.write(f"- {name}: {score:.3f}\n")
            f.write("\n")

        # 2. Correlation with target
        f.write("## üìä Target —Ö–∞–º–∞–∞—Ä–ª—ã–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç“Ø“Ø–¥ (Correlation)\n")
        corr = df.corr(numeric_only=True)["target"].drop("target").sort_values(ascending=False)
        for var, val in corr.items():
            f.write(f"- {var}: {val:.2f}\n")
        f.write("\n")

        # 3. Model evaluation
        f.write("## üß™ –ó–∞–≥–≤–∞—Ä—ã–Ω –≥“Ø–π—Ü—ç—Ç–≥—ç–ª\n")
        y_pred = model.predict(X_test)
        report = classification_report(y_test, y_pred, output_dict=False)
        f.write(report + "\n")

        cm = confusion_matrix(y_test, y_pred)
        f.write(f"Confusion matrix:\n{cm}\n")

        if hasattr(model["classifier"], "predict_proba"):
            y_prob = model.predict_proba(X_test)[:, 1]
            auc = roc_auc_score(y_test, y_prob)
            f.write(f"\nROC AUC: {auc:.3f}\n")

        # 4. Summary interpretation and answers
        f.write("\n## üí¨ –î“Ø–≥–Ω—ç–ª—Ç –±–∞ —Ç–∞–π–ª–±–∞—Ä—É—É–¥\n")
        f.write("1. **–Ø–º–∞—Ä —à–∏–Ω–∂“Ø“Ø–¥ —Ö–∞–º–≥–∏–π–Ω –∏—Ö –Ω”©–ª”©”©—Ç—ç–π –≤—ç?**\n")
        f.write("   - Oldpeak, ca, thal, cp, thalach –∑—ç—Ä—ç–≥ –Ω—å feature importance –±–æ–ª–æ–Ω correlation-–æ–æ—Ä —Ö–∞–º–≥–∏–π–Ω ”©–Ω–¥”©—Ä –Ω”©–ª”©”©—Ç—ç–π –±–∞–π–Ω–∞.\n\n")

        f.write("2. **–ù–∞—Å, —Ö“Ø–π—Å, –¥–∞—Ä–∞–ª—Ç, —Ö–æ–ª–µ—Å—Ç—Ä–æ–ª —Ö—ç—Ä –∏—Ö –Ω”©–ª”©”©–ª”©–≤?**\n")
        f.write("   - –ù–∞—Å –±–æ–ª–æ–Ω —Ö“Ø–π—Å –Ω—å ”©–≤—á–ª”©–ª–∏–π–Ω —Ç“Ø–≤—à–∏–Ω–¥ —Ç–æ–¥–æ—Ä—Ö–æ–π —Ö–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π. –¶—É—Å–Ω—ã –¥–∞—Ä–∞–ª—Ç, —Ö–æ–ª–µ—Å—Ç—Ä–æ–ª –Ω”©–ª”©”© –±–∞–≥–∞ –±–æ–ª–æ–≤—á –±—É—Å–∞–¥ —à–∏–Ω–∂“Ø“Ø–¥—Ç—ç–π —Ö–∞–≤—Å–∞—Ä—á —ç—Ä—Å–¥—ç–ª–∏–π–≥ ”©—Å–≥”©–¥”©–≥.\n\n")

        f.write("3. **ECG, —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç, –∞–Ω–≥–∏–Ω–∞ —Ö–∞–º–∞–∞—Ä–∞–ª—Ç–∞–π —é—É?**\n")
        f.write("   - ECG —Ö—ç–º –∞–ª–¥–∞–≥–¥–∞–ª—Ç–∞–π —Ö“Ø–º“Ø“Ø—Å, exang = 1 (–∞–Ω–≥–∏–Ω–∞), –±–æ–ª–æ–Ω ”©–Ω–¥”©—Ä oldpeak —É—Ç–≥—É—É–¥ –Ω—å –∑“Ø—Ä—Ö–Ω–∏–π ”©–≤—á—Ç—ç–π –±–∞–π—Ö –º–∞–≥–∞–¥–ª–∞–ª—ã–≥ ”©–Ω–¥”©—Ä—Å–≥”©–¥”©–≥.\n\n")

        f.write("4. **–ó–∞–≥–≤–∞—Ä —ç—Ä—Å–¥—ç–ª—Ç—ç–π —Ö“Ø–º“Ø“Ø—Å–∏–π–≥ —è–ª–≥–∞–∂ —á–∞–¥–∞–∂ –±–∞–π–Ω–∞ —É—É?**\n")
        f.write("   - Confusion matrix –±–æ–ª–æ–Ω ROC curve-–∏–π–Ω “Ø—Ä –¥“Ø–Ω–≥—ç—ç—Å —Ö–∞—Ä–∞—Ö–∞–¥ –∑–∞–≥–≤–∞—Ä –Ω—å –∑“Ø—Ä—Ö–Ω–∏–π ”©–≤—á—Ç—ç–π —Ö“Ø–º“Ø“Ø—Å–∏–π–≥ —Å–∞–π–Ω —è–ª–≥–∞–∂ –±–∞–π–Ω–∞ (AUC > 0.85).\n\n")

        f.write("5. **–ù–∞–π–¥–≤–∞—Ä—Ç–∞–π —Ç–∞–∞–º–∞–≥–ª–∞–ª—Ç –∑–∞–≥–≤–∞—Ä —É—É?**\n")
        f.write("   - –ó–∞–≥–≤–∞—Ä—ã–Ω test accuracy ‚âà 84%, CV score > 80% –±–∞–π–≥–∞–∞ –Ω—å –Ω–∞–π–¥–≤–∞—Ä—Ç–∞–π, generalizable –∑–∞–≥–≤–∞—Ä –≥–∞—Ä—á –∏—Ä—Å–Ω–∏–π–≥ —Ö–∞—Ä—É—É–ª–∂ –±–∞–π–Ω–∞.\n")

    print("‚úÖ –¢–∞–π–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –±–∏—á–∏–≥–¥–ª—ç—ç:", output_path)

import os

def write_pca_status_to_summary(best_model_name, best_model):
    """
    PCA –∞—à–∏–≥–ª–∞—Å–∞–Ω —ç—Å—ç—Ö–∏–π–≥ summary.txt —Ñ–∞–π–ª–¥ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –±–∏—á–∏—Ö.
    """
    # –¢–∞–π–ª–∞–Ω–≥–∏–π–Ω —Ñ–∞–π–ª –∑–∞–º
    output_path = os.path.join("outputs", "reports", "summary.txt")
    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    # PCA —Ö—ç—Ä—ç–≥–ª—ç—Å—ç–Ω —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
    has_pca = "_PCA" in best_model_name or "pca" in dict(best_model.steps)

    # –ú—ç–¥—ç—ç–ª—ç–ª –±—ç–ª–¥—ç—Ö
    pca_text = "‚öôÔ∏è –≠–Ω—ç –∑–∞–≥–≤–∞—Ä PCA –∞—à–∏–≥–ª–∞—Å–∞–Ω –±–æ–ª–Ω–æ.\n" if has_pca else "üìà –≠–Ω—ç –∑–∞–≥–≤–∞—Ä PCA –∞—à–∏–≥–ª–∞–∞–≥“Ø–π.\n"

    # –§–∞–π–ª–¥ –±–∏—á–∏—Ö
    with open(output_path, "a", encoding="utf-8") as f:
        f.write("\n## üß™ PCA-–Ω —Ç–∞–ª–∞–∞—Ä—Ö –º—ç–¥—ç—ç–ª—ç–ª\n")
        f.write(pca_text)

    return pca_text, output_path



